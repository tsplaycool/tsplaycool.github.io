<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SpringBoot 简介]]></title>
    <url>%2F2018%2F11%2F28%2Fspringboot%2F</url>
    <content type="text"><![CDATA[前言作为一个SpringBoot新人，在学习中有诸多疑惑，慢慢梳理出来、但求拨云见日。SpringBoot和SpringSpring是容器，是管理对象生命周期的容器。开发的时候，由Spring容器来处理对象的生命周期。Spring容器能够帮助我们来管理生命周期的前提是我们需要对Spring进行配置。而SpringBoot的出现，简化了这种XML的配置过程，这也是SpringBoot的一大优势。当然，SpringBoot也不单单仅有这一个优势，更多的优势可以自行百度一下。HelloWorldSpringBoot自带了java web服务器，引入SpringBoot后，在main方法中注册Application启动类，即可运行。页面输出HelloWorld，需要配置一个@Controller，用来响应浏览器请求。控制器@Controller 用来处理http的请求，@RestController用来返回Json数据格式，@RequestMapping用来配置Url映射。可以使用GetMapping来简化Get操作。Controller1234567public class HelloController &#123; @RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)//等价于@GetMapping(value=&quot;/hello&quot;) @ResponseBody public String sayHello() &#123; return &quot;Hello，Spring Boot！&quot;; &#125;&#125;当注解写成@RestController的时候，可以直接返回一个序列化的JSON对象。下面的代码将返回一个JSON格式的CMB对象。RestController12345678@RestController@RequestMapping(&quot;/config&quot;)public class ConfigController &#123; @RequestMapping(&quot;/hr&quot;) public CMB currentUser() &#123; return CMBUtils.getCurrentCMB(); &#125;&#125;Controller可以返回字符串，可以返回序JSON列化后的对象，那要怎么返回HTML页面呢？可以使用前端页面模板。thymeleaf首先在配置文件中引入thymeleaf的包，然后再Controller中编写响应请求代码，返回html的页面名字。其中，ModelMap是用来与Html页面进行数据交互的。Controller12345@RequestMapping(method = RequestMethod.GET)public String getBookList(ModelMap map) &#123; map.addAttribute(&quot;bookList&quot;,bookService.findAll()); return &quot;bookList&quot;;&#125;bookList.html的页面部分内容如下所示：bookList.html1234567&lt;tr th:each=&quot;book : $&#123;bookList&#125;&quot;&gt; &lt;th scope=&quot;row&quot; th:text=&quot;$&#123;book.id&#125;&quot;&gt;&lt;/th&gt; &lt;td&gt;&lt;a th:href=&quot;@&#123;/book/update/&#123;bookId&#125;(bookId=$&#123;book.id&#125;)&#125;&quot; th:text=&quot;$&#123;book.name&#125;&quot;&gt;&lt;/a&gt;&lt;/td&gt; &lt;td th:text=&quot;$&#123;book.writer&#125;&quot;&gt;&lt;/td&gt; &lt;td th:text=&quot;$&#123;book.introduction&#125;&quot;&gt;&lt;/td&gt; &lt;td&gt;&lt;a class=&quot;btn btn-danger&quot; th:href=&quot;@&#123;/book/delete/&#123;bookId&#125;(bookId=$&#123;book.id&#125;)&#125;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;数据库操作SpringBoot可以方便的连接多种数据库，比如MySql，ElasticSearch等。在学习过程中梳理出了以下几个需要了解的点：ORM框架主流的有hibernate以及mybatis，区别在于前者无须写sql，通过对象操作数据库，后者通过编写更加灵活的sql语句来操作数据库。ORM是JPA规范中的一个思想体现，JPA规范包含了ORM。JPA、spring-data-jpa、hibernate三者之间的关系，JPA是Java Persistence API缩写，是JAVA持久化规范，spring-data-jpa对具体的JPA实现做了封装，默认采用hibernate实现，能够方便大家在不同的ORM框架之间进行切换而不需要更改代码。操作步骤：1、引入spring-data-jpa；2、编写Entity类；3、编写Repository类；4、调用方法Book.java123456789@Entitypublic class Book implements Serializable &#123; @Id @GeneratedValue private Long id; private String name; private String writer; ....get set ....BookRepository.java12345/** * Book 数据持久层操作接口 */public interface BookRepository extends JpaRepository&lt;Book, Long&gt; &#123;&#125;BookServiceImpl.java1234567891011121314/** * Book 业务层实现 */@Servicepublic class BookServiceImpl implements BookService &#123; @Autowired BookRepository bookRepository; @Override public List&lt;Book&gt; findAll() &#123; return bookRepository.findAll(); &#125;......从上面代码中可以看到，在业务服务层只需要引入BookRepository后，就可以操作数据库中相关数据，很方便。已经具备了搭建一套对外服务的功能，包括响应请求、操作数据、返回数据。代码结构规范的SpringBoot工程分层结构应该包括如下项：应用监控sprig-boot-starter-actuatorSpringCloud]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的gitment评论报错]]></title>
    <url>%2F2018%2F11%2F28%2Fhexogitmenterror%2F</url>
    <content type="text"><![CDATA[Gitment报错今天发现我博客hexo采用的github issue的评论系统gitment出现了以下报错：所有评论Error: API rate limit exceeded for 107.178.194.84. (But here’s the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)解决方案：无需解决原因：这是github的自我保护机制，防止未登陆用户重复调用API。点击下方github登陆按钮登陆后，错误消失。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gitment</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XX-Net科学上网]]></title>
    <url>%2F2018%2F11%2F28%2Fxxnet%2F</url>
    <content type="text"><![CDATA[前言Great Wall 不多说，中国特色，哈哈哈。XX-Net这个跟之前用的GoAgent貌似一样的原理，先去谷歌申请一个小应用程序，然后利用这个来科学上网。详细介绍都在GitHub上XX-Net，目前有25539个星。可以自己去谷歌申请appid，也可以用xx-net自带的。网速还可以，目前用的最好用的科学上网工具，支持windows、mac、Android。本方法需要ipv6隧道，如果用mac连接手机热点，且手机支持4G，则可以直接上网。如果是宽带，需要配置ipv6协议，教程上有详细说明。]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo next主题SEO优化]]></title>
    <url>%2F2018%2F11%2F21%2Fhexoseo%2F</url>
    <content type="text"><![CDATA[前言我在大学期间使用过ZBlog、WordPress等博客系统。而Hexo与这两者的区别在于，Hexo是静态博客系统。Hexo无需数据库作为存储，也无需服务器端渲染，直接将页面以Html的格式输出给用户。全球最大男性交友社区github提供了GitPage解决方案，使得开发者可以直接将静态Html页面发布到web上。这样也避免了购买web云服务器，却只用来处理静态页面的不划算，免费的总是最好的。GitPage我们可以将Hexo生成的页面push到GitPage中来发布，GitPage是Github提供的个人页面的个性化展示空间。可以通过创建一个Repository，进入设置页面激活GitPage，而后可以通过 (用户名.github.io) 的方式访问。wpstan.github.io。GitPage非常友好的提供了域名映射，我们可以使用自己简短的域名来访问博客，例如本站的域名tanRD.com。SEO 之 keywords搜索引擎会在页面的&lt;head>标签中查询&lt;keywords>的mete定义，收录时会根据keywords进行索引，因此这个很有必要进行优化。打开_config.yml文件，找到keywords所在的行，添加自己希望通过搜索引擎索引的关键字。关键字个数五六个应该就差不多了，关键字个数对搜索引擎的具体影响，我也不懂。上述改动是针对首页的关键字优化，我们还必须优化每一个文章页面的keywords,打开/themes/next/layout/_partials/head.swig文件，找到以下代码：通过上述代码可以知道，next首先去页面上找keywords，没有就使用tags标签来设置keywords值，再没有就使用主题设置的keywords。我这里将keywords在页面脚手架中定义，使得在new 文章的时候，默认带上这个参数，这样就可以自定义添加keywords了。同时修改上述代码，将页面中自定义的keywords以及页面标签作为最后的keywords。下面是本文的顶部标题，title: Hexo next主题SEO优化 date: 2018-11-21 19:10:30 url_suffix: hexoseo tags: [&apos;hexo&apos;,&apos;seo&apos;] categories: 博客 keywords: [&apos;next&apos;,&apos;搜索引擎优化&apos;] 最终在本页面中得到的keywords如下图所示：可以看到有两个keywords属性，上方的是刚才代码拼接的结果，下方的是Hexo自带的，可以删除这个自带的。打开文件路径：/Hexo/node_modules/hexo/lib/plugins/helper/open_graph.js，将下方代码注释掉即可。if (keywords) { if (typeof keywords === &apos;string&apos;) { result += meta(&apos;keywords&apos;, keywords); } else if (keywords.length) { result += meta(&apos;keywords&apos;, keywords.map(tag =&gt; { return tag.name ? tag.name : tag; }).filter(keyword =&gt; !!keyword).join()); } } SEO 之 静态URL静态URL是指当前页面的地址不会变动，永久存在的网页地址。搜索引擎喜欢收录静态URL，以静态URL作为当前收录页面的索引。如果说当前文章页面经常改动，可想而知，搜索引擎难以收录。Hexo默认是按照日期和文章名字生成当前文章的URL地址，可以查看_config.yml文件，找到permalink这个配置。# URL ## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos; url: https://www.tanrd.com root: / permalink: :year/:month/:day/:url_suffix/ permalink_defaults: 我这里增加了url_suffix作为URL后缀，默认是以文章的文件名拼接URL。而我文件名可能需要设置成中文，方便我查找，但是中文文字在地址栏会被HTML Encode转成html编码，将导致链接很长。因此这里我设置了一个url_suffix，主动设置文章后缀名。这个url_suffix地址在文章中不应该经常修改，特别是搜索引擎收录之后，修改地址将会导致搜索以前之前收录的链接变成死链，无法访问，非常不利于SEO。因此在创建文章的时候，手动设置了这个url_suffix后，就不要再修改了。在SEO之keywords这个章节中，我已经展示了我这个文章的定义头部分，可以看到url_suffix设置的是hexoseo。在地址栏中显示的地址是https://www.tanrd.com/2018/11/21/hexoseo/SEO 之 百度搜索引擎由于之前百度爬虫将github搞挂了，github屏蔽了百度爬虫的抓取。但是没有关系，我们可以采用github的pages和coding的pages来发布自己的博客。coding这个公司已经被腾讯收购，是国内的一家类似github的网站，国内比较出名的git平台还有码云，我们公司最近也引入码云。我这个域名www.tanrd.com 是通过阿里云购买的，在域名解析的时候，只需将百度爬虫解析到国内的coding page即可。在解析的时候选择CNAME将百度指向coding的pages地址，这个意思是将百度爬虫的DNS解析指向国内的coding pages，我这里是wpstan.coding.me。阿里云非常方便的给我们提供了解析线路选择，有多种选择，根据自己需求来决定。除了百度指向coding的pages，其他的线路都默认指向github的pages，毕竟github的CDN很多，网速也还能接受。SEO 之 SiteMapSitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。我这里搞了两sitemap，一个是sitemap.xml，可以打开https://www.tanrd.com/sitemap.xml访问；一个专门针对百度的baidusitemap.xml，地址是https://www.tanrd.com/baidusitemap.xml。在Hexo中安装很容易，只需要执行如下命令即可：npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --saveSEO 之 robots.txt这个文件的作用是制定搜索引擎的爬取规则，所有正规搜索引擎都遵守该标准。新建robots.txt放在source的根目录下，修改其中内容为：User-agent: * Allow: / Allow: /archives/ Allow: /categories/ Allow: /tags/ Allow: /about/ Disallow: /js/ Disallow: /images/ Disallow: /css/ Disallow: /fonts/ Sitemap: https://www.tanrd.com/sitemap.xml Sitemap: https://www.tanrd.com/baidusitemap.xml 本站的robots.txt地址为https://www.tanrd.com/robots.txtSEO 之 nofollow当搜索引擎在爬取文章页面的时候，如果文章中有外链，可能会将爬虫引出我们的网站，因此有必要屏蔽这种情况。首先安装hexo-autonofollowpnpm install hexo-autonofollowp --save再在外层_config.yml中添加配置，将nofollow设置为true：# 外部链接优化 nofollow: enable: true exclude: # 例外的链接，可将友情链接放置此处 - &apos;yousite&apos; 再重新生成的时候，可以看到出站链接自动加上了一系列参数：&lt;a href=&quot;https://github.com/XX-net/XX-Net&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;XX-Net&lt;/a&gt;]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序云开发]]></title>
    <url>%2F2018%2F11%2F19%2Fclouddev%2F</url>
    <content type="text"><![CDATA[前言微信小程序依托微信平台，给用户提供类似App的操作体验。俗话说一流公司订标准，小程序开发语言规范由Tencent制定。小程序开发需要了解前端相关知识，JS、HTML、CSS足以。学习过前端MVVM框架的开发人员，可以很容易上手。闲来无事，周末在家倒腾了一下小程序开发，在这里记录一下心得。小程序云开发一般来说开发一个App或者Web页面，都需要一个服务提供者，用来存储用户相关数据，或者给Web页面提供服务端渲染来完成与用户之间交互。但是微信出了一个小程序云开发，可以直接充当云端数据库，看起来特别牛逼的样子。这样一来，就不需要购买各种云服务器来提供服务了。小程序云开发可以让用户在云端编写JS Function函数，相当于FaaS平台（函数即服务）。微信提供免费基础版云平台套餐给开发者使用，开发者也可以花钱升级套餐。我以个人身份注册了一个小程序，个人身份的开发者貌似只能开发一些特定类目的小程序，比价、教育什么的。本人开发了一个小App，后续见github。]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next - Gemini主题修改]]></title>
    <url>%2F2018%2F10%2F19%2Fgeminimodify%2F</url>
    <content type="text"><![CDATA[前言在Hexo的模板中选择了Next主题，在Next主题中看中了Gemini风格的页面。但是有一些小点不符合本人审美，特意修改了一下，以满足我自己的视觉体验。页面宽度修改chrome浏览器F12查看到页面的内容宽度占比为75%，找到themes中的next文件夹，进入/source/css/_variables/目录，打开Gemini.styl文件。可以看到以下内容：也可以设置$body-bg-color，改变页面背景色。页面底部主题信息删除打开themes中的next文件夹，找到_config.yml文件，修改footer下面的配置为false即可。copyright: # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false 页面顶部黑色线条删除打开themes中的next文件夹，找到/source/css/_common/components/header/headerband.styl文件，删除background样式即可。.headband { height: $headband-height; background: $headband-bg; } 静态资源压缩可以通过安装hexo-all-minifier来进行静态资源压缩，减少网络请求时候的数据包，加快网站响应速度。可以对html、css、js、images进行压缩，即把重复的代码合并，把多余的空格去掉，用算法对images进行压缩。npm install hexo-all-minifier --save再在外层_config.yml中添加配置，可以分别对html、js、css、image进行处理： html_minifier: enable: true ignore_error: false exclude: css_minifier: enable: true exclude: - &apos;*.min.css&apos; js_minifier: enable: true mangle: true output: compress: exclude: - &apos;*.min.js&apos; image_minifier: enable: true interlaced: false multipass: false optimizationLevel: 2 pngquant: false progressive: false 再重新生成的时候，可以看到页面上的静态资源已经被压缩，Size这一栏数据量有所减少。下面是压缩前后的传输数据量对比：]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gemini</tag>
      </tags>
  </entry>
</search>
